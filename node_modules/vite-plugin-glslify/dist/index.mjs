var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/index.ts
import { createFilter } from "@rollup/pluginutils";

// src/files_compiler.ts
import { compile } from "glslify";
import path from "path";
function filesCompiler(extFilter, options) {
  return {
    name: "vite-plugin-glslify:files",
    transform(code, id) {
      if (extFilter(id)) {
        return {
          code: `export default \`${compile(code, __spreadProps(__spreadValues({}, options), {
            basedir: path.dirname(id)
          }))}\``
        };
      }
      return null;
    },
    handleHotUpdate(ctx) {
      if (!extFilter(ctx.file))
        return;
      const defaultRead = ctx.read;
      ctx.read = async () => {
        return compile(await defaultRead(), __spreadProps(__spreadValues({}, options), {
          basedir: path.dirname(ctx.file)
        }));
      };
    }
  };
}

// src/literals_compiler.ts
import { generate } from "astring";

// node_modules/estree-walker/dist/esm/estree-walker.js
var WalkerBase = class {
  constructor() {
    this.should_skip = false;
    this.should_remove = false;
    this.replacement = null;
    this.context = {
      skip: () => this.should_skip = true,
      remove: () => this.should_remove = true,
      replace: (node) => this.replacement = node
    };
  }
  replace(parent, prop, index, node) {
    if (parent) {
      if (index !== null) {
        parent[prop][index] = node;
      } else {
        parent[prop] = node;
      }
    }
  }
  remove(parent, prop, index) {
    if (parent) {
      if (index !== null) {
        parent[prop].splice(index, 1);
      } else {
        delete parent[prop];
      }
    }
  }
};
var SyncWalker = class extends WalkerBase {
  constructor(enter, leave) {
    super();
    this.enter = enter;
    this.leave = leave;
  }
  visit(node, parent, prop, index) {
    if (node) {
      if (this.enter) {
        const _should_skip = this.should_skip;
        const _should_remove = this.should_remove;
        const _replacement = this.replacement;
        this.should_skip = false;
        this.should_remove = false;
        this.replacement = null;
        this.enter.call(this.context, node, parent, prop, index);
        if (this.replacement) {
          node = this.replacement;
          this.replace(parent, prop, index, node);
        }
        if (this.should_remove) {
          this.remove(parent, prop, index);
        }
        const skipped = this.should_skip;
        const removed = this.should_remove;
        this.should_skip = _should_skip;
        this.should_remove = _should_remove;
        this.replacement = _replacement;
        if (skipped)
          return node;
        if (removed)
          return null;
      }
      for (const key in node) {
        const value = node[key];
        if (typeof value !== "object") {
          continue;
        } else if (Array.isArray(value)) {
          for (let i = 0; i < value.length; i += 1) {
            if (value[i] !== null && typeof value[i].type === "string") {
              if (!this.visit(value[i], node, key, i)) {
                i--;
              }
            }
          }
        } else if (value !== null && typeof value.type === "string") {
          this.visit(value, node, key, null);
        }
      }
      if (this.leave) {
        const _replacement = this.replacement;
        const _should_remove = this.should_remove;
        this.replacement = null;
        this.should_remove = false;
        this.leave.call(this.context, node, parent, prop, index);
        if (this.replacement) {
          node = this.replacement;
          this.replace(parent, prop, index, node);
        }
        if (this.should_remove) {
          this.remove(parent, prop, index);
        }
        const removed = this.should_remove;
        this.replacement = _replacement;
        this.should_remove = _should_remove;
        if (removed)
          return null;
      }
    }
    return node;
  }
};
function walk(ast, { enter, leave }) {
  const instance = new SyncWalker(enter, leave);
  return instance.visit(ast, null);
}

// src/literals_compiler.ts
import { compile as compile2 } from "glslify";
import MagicString from "magic-string";
import path2 from "path";
function literalsCompiler(idFilter, funcFilter, options) {
  return {
    name: "vite-plugin-glslify:literals",
    transform(code, id) {
      if (!idFilter(id))
        return void 0;
      if (funcFilter(code)) {
        const ast = this.parse(code);
        const s = new MagicString(code);
        const compileAndOverwrite = (node, start, end) => {
          const target = generate(node);
          try {
            const compiled = compile2(target.replace(/`/g, ""), __spreadProps(__spreadValues({}, options), {
              basedir: path2.dirname(id)
            }));
            s.overwrite(start, end, `\`${compiled}\``);
          } catch (e) {
            this.error(e.message);
          }
        };
        walk(ast, {
          enter(node) {
            if (!node.type) {
              return;
            }
            if ((node == null ? void 0 : node.type) === "TaggedTemplateExpression") {
              if (funcFilter(node.tag.name)) {
                const { start, end } = node;
                compileAndOverwrite(node.quasi, start, end);
              }
            } else if ((node == null ? void 0 : node.type) === "CallExpression") {
              if (funcFilter(node.callee.name)) {
                const { start, end } = node;
                compileAndOverwrite(node.arguments[0], start, end);
              }
            }
          }
        });
        return {
          code: s.toString()
        };
      }
      return void 0;
    }
  };
}

// src/index.ts
var DEFAULT_EXTENSIONS = [/\.vert$/, /\.frag$/, /\.glsl$/];
function glslify(options = {}) {
  var _a, _b, _c;
  const plugins = [];
  const transformFiles = (_a = options.transformFiles) != null ? _a : true;
  const transformLiterals = (_b = options.transformLiterals) != null ? _b : true;
  const glslifyOptions = (_c = options.options) != null ? _c : {};
  if (transformFiles) {
    const extFilter = createFilter(options.extensions || DEFAULT_EXTENSIONS);
    plugins.push(filesCompiler(extFilter, glslifyOptions));
  }
  if (transformLiterals) {
    const idFilter = createFilter(options.include || [/\.ts$/, /\.js$/], options.exclude || ["node_modules/**"]);
    const funcFilter = createFilter(options.funcName || [/glsl/]);
    plugins.push(literalsCompiler(idFilter, funcFilter, glslifyOptions));
  }
  return plugins;
}
var src_default = glslify;
export {
  DEFAULT_EXTENSIONS,
  src_default as default,
  glslify
};
